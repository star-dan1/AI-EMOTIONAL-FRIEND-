
import streamlit as st
import joblib
import numpy as np
import unicodedata

# ---------------------------
# Load saved models
# ---------------------------
lang_pipe = joblib.load(r"C:\Users\User PC\Documents\Emmotional AI\models\lang_pipeline.joblib")
emo_pipe  = joblib.load(r"C:\Users\User PC\Documents\Emmotional AI\models\emo_pipeline.joblib")

# ---------------------------
# Text normalization
# ---------------------------
def normalize_text(s):
    s = str(s).strip()
    s = unicodedata.normalize("NFKC", s)
    return s

# ---------------------------
# Response map
# ---------------------------
RESPONSE_MAP = {
    "Yoruba": {
        "Happy":   "Inu mi dun pe o n r·∫πrin!",
        "Sad":     "M√° b√† a n√≠ lokan, ohun gbogbo m√°a d√°a.",
        "Angry":   "J·ªçw·ªç, gbiyanju lati t√∫ ·ªçkan r·∫π soke ‚Äî a le s·ªçr·ªç.",
        "Fear":    "M√° ·π£e y·ªç ara r·∫π l·∫πnu, emi w√† n'√≠b·∫πÃÄ f√∫n ·ªç.",
        "Love":    "O ·π£eun, inu mi dun.",
        "Surprise":"Oh! Iyanu ni y·∫πn!",
        "Neutral": "O ·π£eun, mo ti gb·ªçÃÅ ·ªç."
    },
    "Hausa": {
        "Happy":   "Ina farin ciki da jin haka!",
        "Sad":     "Ina tausaya maka, za mu iya magana idan kana so.",
        "Angry":   "Ka kwantar da hankalinka; muna iya tattauna shi.",
        "Fear":    "Kar ka ji tsoro, zan taimaka in dai zan iya.",
        "Love":    "Na gode ‚Äî hakan ya faranta min rai.",
        "Surprise":"Abin mamaki ne!",
        "Neutral": "Na gode, na fahimta."
    },
    "Igbo": {
        "Happy":   "Obi d·ªã m ·ª•t·ªç ·ªãn·ª• nke ah·ª•!",
        "Sad":     "Ekwela ka obi daa gi, ihe niile ga-ad·ªãr·ªã mma.",
        "Angry":   "Kwusi iwe‚Äîka any·ªã kwur·ªãta ya nway·ªç·ªç.",
        "Fear":    "Ejila egwu jide g·ªã, m n·ªç ebe a.",
        "Love":    "Ekele m, nke ah·ª• gbaara m obi umeala.",
        "Surprise":"Nn·ªç·ªç! Nke ah·ª• juputara m n'·ªãt·ª•nanya.",
        "Neutral": "Daal·ª•, ewezuga nke ah·ª•."
    }
}

# ---------------------------
# Function to classify
# ---------------------------
def classify_and_respond(text):
    t = normalize_text(text)

    # language prediction
    lang_probs = lang_pipe.predict_proba([t])[0]
    lang_idx = np.argmax(lang_probs)
    lang_label = lang_pipe.classes_[lang_idx]
    lang_conf = float(lang_probs[lang_idx])

    # emotion prediction
    emo_probs = emo_pipe.predict_proba([t])[0]
    emo_idx = np.argmax(emo_probs)
    emo_label = emo_pipe.classes_[emo_idx]
    emo_conf = float(emo_probs[emo_idx])

    # response
    response = "Thanks ‚Äî I'm here for you."
    if lang_label in RESPONSE_MAP and emo_label in RESPONSE_MAP[lang_label]:
        response = RESPONSE_MAP[lang_label][emo_label]

    return lang_label, lang_conf, emo_label, emo_conf, response

# ---------------------------
# Streamlit UI
# ---------------------------
st.set_page_config(page_title="Multilingual Emotion Chatbot", page_icon="üí¨", layout="centered")

st.title("üí¨ Multilingual Emotion Chatbot")
st.write("Chat in **Yoruba**, **Hausa**, or **Igbo** and get an emotional response!")

user_input = st.text_input("Type your message:")

if user_input:
    lang, lconf, emo, econf, resp = classify_and_respond(user_input)
    st.markdown(f"**Detected Language:** {lang} ({lconf:.2f})")
    st.markdown(f"**Detected Emotion:** {emo} ({econf:.2f})")
    st.success(f"**Bot:** {resp}")
